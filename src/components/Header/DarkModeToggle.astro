<mode-toggle class="flex">
  <button
    class="ml-4 inline-flex h-6 w-11 items-center rounded-full bg-black dark:bg-white"
    id="mode-toggle"
    role="switch"
    type="button"
    tabindex="0"
    aria-checked="false"
    data-headlessui-state=""
    ><span class="sr-only">Toggle dark mode</span><span
      id="mode-circle"
      class="light inline-block h-4 w-4 translate-x-1 rounded-full bg-primary-yellow bg-gradient-to-tr duration-300 dark:translate-x-6 dark:bg-primary-blue"
      ><span
        class="absolute top-0 right-0 h-[10px] w-[10px] scale-[0] rounded-full bg-gray-700"
      ></span>
    </span>
  </button>
</mode-toggle>

<script>
  function getCurrentTheme() {
    return (
      sessionStorage.getItem('theme') ||
      (window.matchMedia('(prefers-color-scheme: dark)').matches
        ? 'dark'
        : 'light')
    )
  }
  function updateTheme(mode: 'light' | 'dark') {
    const themeColorMetaTag = document.head.querySelector<HTMLMetaElement>(
      'meta[name="theme-color"]'
    )!
    if (mode === 'light') {
      document.documentElement.classList.remove('dark')
      themeColorMetaTag.content = '#ffffff'
      sessionStorage.setItem('theme', 'light')
    } else {
      document.documentElement.classList.add('dark')
      themeColorMetaTag.content = '#262626'
      sessionStorage.setItem('theme', 'dark')
    }
  }

  class ModeToggle extends HTMLElement {
    constructor() {
      super()
      let currentMode = getCurrentTheme()

      const toggle = this.querySelector('button')
      const iconElem = toggle?.querySelector('#mode-circle')

      if (currentMode === 'dark') {
        // iconElem?.classList.remove('light')
        iconElem?.classList.add('dark')
      }

      toggle?.addEventListener('click', () => {
        if (currentMode === 'dark') {
          updateTheme('light')
          currentMode = 'light'
        } else {
          updateTheme('dark')
          currentMode = 'dark'
        }
      })
    }
  }

  customElements.define('mode-toggle', ModeToggle)
</script>
